<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd ">

    <!--第二种方式：加载一个properties文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="classpath:application.properties"/>
    </bean>

    <!-- 第三种方式：加载多个properties文件 -->
    <!--<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:jdbc.properties</value>-->
                <!--<value>classpath:common.properties</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="fileEncoding" value="UTF-8"/>-->
    <!--</bean>-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">-->
        <!--<property name="properties" ref="configProperties"/>-->
    <!--</bean>-->

    <!-- 阿里 druid数据库连接池 -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.driverClassName}" />
        <property name="url" value="${spring.datasource.url}" />
        <property name="username" value="${spring.datasource.username}" />
        <property name="password" value="${spring.datasource.password}" />
        <property name="initialSize" value="${spring.datasource.initial-size}" />
        <property name="maxActive" value="${spring.datasource.max-active}" />
        <property name="minIdle" value="${spring.datasource.min-idle}" />
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

    </bean>
    <!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="select*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <!-- 剩下的其他方法. -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>
    <!-- mybatis配置 -->
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <bean id="mySqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="mySqlSessionFactory"/>
    </bean>


    <!--?<bean name="memcachedClient" destroy-method="shutdown"-->
          <!--?class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean">-->
        <!--?<property name="servers">-->
            <!--?<value>${memcached.url}</value>-->
        <!--?</property>-->
        <!--?<property name="sessionLocator">-->
            <!--?<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>-->
        <!--?</property>-->
        <!--?<property name="transcoder">-->
            <!--?<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>-->
        <!--?</property>-->
    <!--?</bean>-->

    <!-- 配置Jedis的 缓冲池 -->
    <bean id="JedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxIdle="6" p:minEvictableIdleTimeMillis="300000"
          p:numTestsPerEvictionRun="3" p:timeBetweenEvictionRunsMillis="60000">
    </bean>


    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnFactory">
        <property name="defaultSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
    </bean>

    <!--<beans profile="development">-->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${spring.redis.host}" p:port="${spring.redis.port}"
          p:usePool="true">
    </bean>
</beans>